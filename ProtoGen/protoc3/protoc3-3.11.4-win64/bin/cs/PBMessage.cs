// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PBMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PBMessage {

  /// <summary>Holder for reflection information generated from PBMessage.proto</summary>
  public static partial class PBMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for PBMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PBMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9QQk1lc3NhZ2UucHJvdG8SCVBCTWVzc2FnZSIfCgdQb2ludDJEEgkKAXgY",
            "ASABKAUSCQoBeRgCIAEoBSIqCgdQb2ludDNEEgkKAXgYASABKAUSCQoBeRgC",
            "IAEoBRIJCgF6GAMgASgFIoUCCgpQbGF5ZXJJbmZvEhAKCHBsYXllcklkGAEg",
            "ASgFEg8KB2FjY291bnQYAiABKAkSDAoEbmFtZRgDIAEoCRIRCgltb3ZlU3Bl",
            "ZWQYBCABKAUSGQoRbW92ZVNwZWVkQWRkaXRpb24YBSABKAUSGAoQbW92ZVNw",
            "ZWVkUGVyY2VudBgGIAEoBRITCgthdHRhY2tTcGVlZBgHIAEoBRIbChNhdHRh",
            "Y2tTcGVlZEFkZGl0aW9uGAggASgFEhoKEmF0dGFja1NwZWVkUGVyY2VudBgJ",
            "IAEoBRIQCghtYXhCbG9vZBgKIAEoBRIQCghub3dCbG9vZBgLIAEoBRIMCgR0",
            "eXBlGAwgASgFIu8BCgtNb25zdGVySW5mbxIKCgJpZBgBIAEoBRIMCgRuYW1l",
            "GAIgASgJEhEKCW1vdmVTcGVlZBgDIAEoBRIZChFtb3ZlU3BlZWRBZGRpdGlv",
            "bhgEIAEoBRIYChBtb3ZlU3BlZWRQZXJjZW50GAUgASgFEhMKC2F0dGFja1Nw",
            "ZWVkGAYgASgFEhsKE2F0dGFja1NwZWVkQWRkaXRpb24YByABKAUSGgoSYXR0",
            "YWNrU3BlZWRQZXJjZW50GAggASgFEhAKCG1heEJsb29kGAkgASgFEhAKCG5v",
            "d0Jsb29kGAogASgFEgwKBHR5cGUYCyABKAUiXAoQT3BlcmF0aW9uQ29tbWFu",
            "ZBIKCgJpZBgBIAEoAxIMCgR0eXBlGAIgASgFEgwKBGRhdGEYAyABKAwSDQoF",
            "ZnJhbWUYBCABKAMSEQoJZnJhbWV0aW1lGAUgASgDIl4KEENNRF9SZWxlYXNl",
            "U2tpbGwSDgoGcm9sZUlkGAEgASgFEg8KB3NraWxsSWQYAiABKAUSKQoNbW91",
            "c2Vwb3NpdGlvbhgDIAEoCzISLlBCTWVzc2FnZS5Qb2ludDNEIpcBCg9DTURf",
            "TW92ZVRvUG9pbnQSDgoGcm9sZUlkGAEgASgFEiQKCHBvc2l0aW9uGAIgASgL",
            "MhIuUEJNZXNzYWdlLlBvaW50M0QSJQoJZGlyZWN0aW9uGAMgASgLMhIuUEJN",
            "ZXNzYWdlLlBvaW50M0QSJwoLZGVzdGluYXRpb24YBCABKAsyEi5QQk1lc3Nh",
            "Z2UuUG9pbnQzRCKVAQoRQ01EX0NyZWF0ZU1vbnN0ZXISCgoCaWQYASABKAUS",
            "JwoHbW9uc3RlchgCIAEoCzIWLlBCTWVzc2FnZS5Nb25zdGVySW5mbxIkCghw",
            "b3NpdGlvbhgDIAEoCzISLlBCTWVzc2FnZS5Qb2ludDNEEiUKCWRpcmVjdGlv",
            "bhgEIAEoCzISLlBCTWVzc2FnZS5Qb2ludDNEIjQKD1JlcXVlc3RSZWdpZ3Rl",
            "chIPCgdhY2NvdW50GAEgASgJEhAKCHBhc3N3b3JkGAIgASgJIjIKEFJlc3Bv",
            "bnNlUmVnaXN0ZXISDgoGcmVzdWx0GAEgASgIEg4KBnJlYXNvbhgCIAEoCSJA",
            "CgxSZXF1ZXN0TG9naW4SDQoFdG9rZW4YASABKAkSDwoHYWNjb3VudBgCIAEo",
            "CRIQCghwYXNzd29yZBgDIAEoCSI+Cg1SZXNwb25zZUxvZ2luEg4KBnJlc3Vs",
            "dBgBIAEoCBINCgV0b2tlbhgCIAEoCRIOCgZyZWFzb24YAyABKAkiHQoMUmVx",
            "dWVzdE1hdGNoEg0KBXRva2VuGAEgASgJIhYKFFJlc3BvbnNlUmVxdWVzdE1h",
            "dGNoIiMKElJlcXVlc3RDYW5jZWxNYXRjaBINCgV0b2tlbhgBIAEoCSIVChNS",
            "ZXNwb25zZUNhbmNlbE1hdGNoIj4KE0Jyb2FkRW50ZXJSZWFkeVJvb20SJwoI",
            "Y29tbWFuZHMYASADKAsyFS5QQk1lc3NhZ2UuUGxheWVySW5mbyI1ChRSZXF1",
            "ZXN0Um9vbU9wZXJhdGlvbhINCgV0b2tlbhgBIAEoCRIOCgZvcFR5cGUYAiAB",
            "KAUiWQoSQnJvYWRSb29tT3BlcmF0aW9uEhAKCHBsYXllcklkGAEgASgFEhUK",
            "DW9wZXJhdGlvblR5cGUYAiABKAUSGgoSb3BlcmF0aW9uUGFyYW1ldGVyGAMg",
            "ASgMIm8KEEJyb2FkUGxheWVyUmVhZHkSDgoGcm9sZUlkGAEgASgFEiQKCHBv",
            "c2l0aW9uGAIgASgLMhIuUEJNZXNzYWdlLlBvaW50M0QSJQoJZGlyZWN0aW9u",
            "GAMgASgLMhIuUEJNZXNzYWdlLlBvaW50M0QiYgoUQnJvYWRCYXR0bGVHYW1l",
            "U3RhcnQSEAoIYmF0dGxlSUQYASABKAUSEAoIcmFuZFNlZWQYAiABKAUSDwoH",
            "dWRwUG9ydBgDIAEoBRIVCg1mcmFtZUludGVydmFsGAQgASgFIoQBChJQbGF5",
            "ZXJGcmFtZUNvbW1hbmQSDQoFdG9rZW4YASABKAkSDgoGcm9sZUlkGAIgASgF",
            "Eg0KBWZyYW1lGAMgASgDEhEKCWZyYW1ldGltZRgEIAEoAxItCghjb21tYW5k",
            "cxgFIAMoCzIbLlBCTWVzc2FnZS5PcGVyYXRpb25Db21tYW5kImoKF0Jyb2Fk",
            "UGxheWVyRnJhbWVDb21tYW5kEg0KBWZyYW1lGAEgASgDEhEKCWZyYW1ldGlt",
            "ZRgCIAEoAxItCghjb21tYW5kcxgEIAMoCzIbLlBCTWVzc2FnZS5PcGVyYXRp",
            "b25Db21tYW5kImkKElJlcXVlc3REZWx0YUZyYW1lcxINCgV0b2tlbhgBIAEo",
            "CRIOCgZyb2xlSWQYAiABKAUSFwoPRGVsdGFTdGFydEZyYW1lGAMgASgDEhsK",
            "E0RlbHRhU3RhcnRGcmFtZXRpbWUYBCABKAMiSwoTUmVzcG9uc2VEZWx0YUZy",
            "YW1lcxI0Cghjb21tYW5kcxgBIAMoCzIiLlBCTWVzc2FnZS5Ccm9hZFBsYXll",
            "ckZyYW1lQ29tbWFuZCInChVCcm9hZFBsYXllckRpc0Nvbm5lY3QSDgoGcm9s",
            "ZUlkGAEgASgFIiYKFEJyb2FkUGxheWVyUmVDb25uZWN0Eg4KBnJvbGVJZBgB",
            "IAEoBSIPCg1Ccm9hZEdhbWVPdmVyIikKC1JlcXVlc3RQaW5nEgsKA3VpZBgB",
            "IAEoBRINCgV0b2tlbhgCIAEoCSIqCgxSZXNwb25zZVBpbmcSCwoDdWlkGAEg",
            "ASgFEg0KBXRva2VuGAIgASgJKs0ECglNZXNzYWdlSUQSDAoITWluVmFsdWUQ",
            "ABIXChNDU19SZWd1ZXN0X1JlZ2lzdGVyEGUSGAoUU0NfUmVzcG9uc2VfUmVn",
            "aXN0ZXIQZhIUChBDU19SZWd1ZXN0X0xvZ2luEGcSFQoRU0NfUmVzcG9uc2Vf",
            "TG9naW4QaBIUChBDU19SZWd1ZXN0X01hdGNoEGkSFQoRU0NfUmVzcG9uc2Vf",
            "TWF0Y2gQahIaChZDU19SZWd1ZXN0X0NhbmNhbE1hdGNoEGsSGwoXU0NfUmVz",
            "cG9uc2VfQ2FuY2VsTWF0Y2gQbBIZChRCcm9hZF9FbnRlclJlYWR5Um9vbRDJ",
            "ARIZChRDU19DTURfUm9vbU9wZXJhdGlvbhDKARIYChNCcm9hZF9Sb29tT3Bl",
            "cmF0aW9uEMsBEhYKEUJyb2FkX0JhdHRsZVN0YXJ0EMwBEhEKDENTX0NNRF9G",
            "cmFtZRCtAhIUCg9Ccm9hZF9DTURfRnJhbWUQrgISGgoVQ1NfUmVndWVzdF9E",
            "ZWx0YUZyYW1lEK8CEhsKFlNDX1Jlc3BvbnNlX0RlbHRhRnJhbWUQsAISGgoV",
            "QnJvYWRfUGxheWVyUmVDb25uZWN0ELECEhsKFkJyb2FkX1BsYXllckRpc0Nv",
            "bm5lY3QQsgISGAoTQ1NfUmVndWVzdF9HYW1lT3ZlchCzAhITCg5Ccm9hZF9H",
            "YW1lT3ZlchC0AhIUCg9DU19SZWd1ZXN0X1BpbmcQ9QMSFQoQU0NfUmVzcG9u",
            "c2VfUGluZxD2AxINCghNYXhWYWx1ZRDoByo7CghHYW1lVHlwZRIPCgtHQU1F",
            "X1VOS09OVxAAEg4KCkdBTUVfVHlwZTEQARIOCgpHQU1FX1R5cGUyEAIqVQoJ",
            "Q29tbWFuZElEEg4KClVOS05PV19DTUQQABIRCg1SRUxFQVNFX1NLSUxMEAES",
            "EQoNTU9WRV9UT19QT0lOVBACEhIKDkNSRUFURV9NT05TVEVSEANCAkgDYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PBMessage.MessageID), typeof(global::PBMessage.GameType), typeof(global::PBMessage.CommandID), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.Point2D), global::PBMessage.Point2D.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.Point3D), global::PBMessage.Point3D.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.PlayerInfo), global::PBMessage.PlayerInfo.Parser, new[]{ "PlayerId", "Account", "Name", "MoveSpeed", "MoveSpeedAddition", "MoveSpeedPercent", "AttackSpeed", "AttackSpeedAddition", "AttackSpeedPercent", "MaxBlood", "NowBlood", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.MonsterInfo), global::PBMessage.MonsterInfo.Parser, new[]{ "Id", "Name", "MoveSpeed", "MoveSpeedAddition", "MoveSpeedPercent", "AttackSpeed", "AttackSpeedAddition", "AttackSpeedPercent", "MaxBlood", "NowBlood", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.OperationCommand), global::PBMessage.OperationCommand.Parser, new[]{ "Id", "Type", "Data", "Frame", "Frametime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.CMD_ReleaseSkill), global::PBMessage.CMD_ReleaseSkill.Parser, new[]{ "RoleId", "SkillId", "Mouseposition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.CMD_MoveToPoint), global::PBMessage.CMD_MoveToPoint.Parser, new[]{ "RoleId", "Position", "Direction", "Destination" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.CMD_CreateMonster), global::PBMessage.CMD_CreateMonster.Parser, new[]{ "Id", "Monster", "Position", "Direction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.RequestRegigter), global::PBMessage.RequestRegigter.Parser, new[]{ "Account", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.ResponseRegister), global::PBMessage.ResponseRegister.Parser, new[]{ "Result", "Reason" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.RequestLogin), global::PBMessage.RequestLogin.Parser, new[]{ "Token", "Account", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.ResponseLogin), global::PBMessage.ResponseLogin.Parser, new[]{ "Result", "Token", "Reason" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.RequestMatch), global::PBMessage.RequestMatch.Parser, new[]{ "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.ResponseRequestMatch), global::PBMessage.ResponseRequestMatch.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.RequestCancelMatch), global::PBMessage.RequestCancelMatch.Parser, new[]{ "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.ResponseCancelMatch), global::PBMessage.ResponseCancelMatch.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.BroadEnterReadyRoom), global::PBMessage.BroadEnterReadyRoom.Parser, new[]{ "Commands" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.RequestRoomOperation), global::PBMessage.RequestRoomOperation.Parser, new[]{ "Token", "OpType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.BroadRoomOperation), global::PBMessage.BroadRoomOperation.Parser, new[]{ "PlayerId", "OperationType", "OperationParameter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.BroadPlayerReady), global::PBMessage.BroadPlayerReady.Parser, new[]{ "RoleId", "Position", "Direction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.BroadBattleGameStart), global::PBMessage.BroadBattleGameStart.Parser, new[]{ "BattleID", "RandSeed", "UdpPort", "FrameInterval" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.PlayerFrameCommand), global::PBMessage.PlayerFrameCommand.Parser, new[]{ "Token", "RoleId", "Frame", "Frametime", "Commands" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.BroadPlayerFrameCommand), global::PBMessage.BroadPlayerFrameCommand.Parser, new[]{ "Frame", "Frametime", "Commands" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.RequestDeltaFrames), global::PBMessage.RequestDeltaFrames.Parser, new[]{ "Token", "RoleId", "DeltaStartFrame", "DeltaStartFrametime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.ResponseDeltaFrames), global::PBMessage.ResponseDeltaFrames.Parser, new[]{ "Commands" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.BroadPlayerDisConnect), global::PBMessage.BroadPlayerDisConnect.Parser, new[]{ "RoleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.BroadPlayerReConnect), global::PBMessage.BroadPlayerReConnect.Parser, new[]{ "RoleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.BroadGameOver), global::PBMessage.BroadGameOver.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.RequestPing), global::PBMessage.RequestPing.Parser, new[]{ "Uid", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBMessage.ResponsePing), global::PBMessage.ResponsePing.Parser, new[]{ "Uid", "Token" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 消息枚举
  /// </summary>
  public enum MessageID {
    [pbr::OriginalName("MinValue")] MinValue = 0,
    /// <summary>
    /// 注册
    /// </summary>
    [pbr::OriginalName("CS_Reguest_Register")] CsReguestRegister = 101,
    /// <summary>
    /// 注册反馈
    /// </summary>
    [pbr::OriginalName("SC_Response_Register")] ScResponseRegister = 102,
    /// <summary>
    /// 登录 
    /// </summary>
    [pbr::OriginalName("CS_Reguest_Login")] CsReguestLogin = 103,
    /// <summary>
    /// 登录反馈
    /// </summary>
    [pbr::OriginalName("SC_Response_Login")] ScResponseLogin = 104,
    /// <summary>
    /// 匹配
    /// </summary>
    [pbr::OriginalName("CS_Reguest_Match")] CsReguestMatch = 105,
    /// <summary>
    /// 匹配反馈
    /// </summary>
    [pbr::OriginalName("SC_Response_Match")] ScResponseMatch = 106,
    /// <summary>
    /// 取消匹配
    /// </summary>
    [pbr::OriginalName("CS_Reguest_CancalMatch")] CsReguestCancalMatch = 107,
    /// <summary>
    /// 取消匹配反馈
    /// </summary>
    [pbr::OriginalName("SC_Response_CancelMatch")] ScResponseCancelMatch = 108,
    /// <summary>
    /// 进入匹配房间---广播
    /// </summary>
    [pbr::OriginalName("Broad_EnterReadyRoom")] BroadEnterReadyRoom = 201,
    /// <summary>
    /// 房间之内的操作请求
    /// </summary>
    [pbr::OriginalName("CS_CMD_RoomOperation")] CsCmdRoomOperation = 202,
    /// <summary>
    /// 房间之内的操作请求---广播
    /// </summary>
    [pbr::OriginalName("Broad_RoomOperation")] BroadRoomOperation = 203,
    /// <summary>
    /// 战斗开始----广播
    /// </summary>
    [pbr::OriginalName("Broad_BattleStart")] BroadBattleStart = 204,
    /// <summary>
    /// 关键帧操作命令
    /// </summary>
    [pbr::OriginalName("CS_CMD_Frame")] CsCmdFrame = 301,
    /// <summary>
    /// 关键帧命令--广播
    /// </summary>
    [pbr::OriginalName("Broad_CMD_Frame")] BroadCmdFrame = 302,
    /// <summary>
    /// 请求发送丢失帧数据
    /// </summary>
    [pbr::OriginalName("CS_Reguest_DeltaFrame")] CsReguestDeltaFrame = 303,
    /// <summary>
    /// 丢失帧数据反馈
    /// </summary>
    [pbr::OriginalName("SC_Response_DeltaFrame")] ScResponseDeltaFrame = 304,
    /// <summary>
    /// 玩家重连广播
    /// </summary>
    [pbr::OriginalName("Broad_PlayerReConnect")] BroadPlayerReConnect = 305,
    /// <summary>
    /// 玩家掉线广播
    /// </summary>
    [pbr::OriginalName("Broad_PlayerDisConnect")] BroadPlayerDisConnect = 306,
    /// <summary>
    /// 游戏结束
    /// </summary>
    [pbr::OriginalName("CS_Reguest_GameOver")] CsReguestGameOver = 307,
    /// <summary>
    /// 游戏结束广播
    /// </summary>
    [pbr::OriginalName("Broad_GameOver")] BroadGameOver = 308,
    [pbr::OriginalName("CS_Reguest_Ping")] CsReguestPing = 501,
    [pbr::OriginalName("SC_Response_Ping")] ScResponsePing = 502,
    [pbr::OriginalName("MaxValue")] MaxValue = 1000,
  }

  /// <summary>
  /// 游戏类型
  /// </summary>
  public enum GameType {
    [pbr::OriginalName("GAME_UNKONW")] GameUnkonw = 0,
    [pbr::OriginalName("GAME_Type1")] _1 = 1,
    [pbr::OriginalName("GAME_Type2")] _2 = 2,
  }

  /// <summary>
  ///服务器也可以发送命令
  ///roleId ==0时说明该命令是服务器发的
  /// </summary>
  public enum CommandID {
    /// <summary>
    /// 空命令
    /// </summary>
    [pbr::OriginalName("UNKNOW_CMD")] UnknowCmd = 0,
    /// <summary>
    /// 释放技能
    /// </summary>
    [pbr::OriginalName("RELEASE_SKILL")] ReleaseSkill = 1,
    /// <summary>
    /// 移动到到指定地点
    /// </summary>
    [pbr::OriginalName("MOVE_TO_POINT")] MoveToPoint = 2,
    /// <summary>
    /// 创建角色
    /// </summary>
    [pbr::OriginalName("CREATE_MONSTER")] CreateMonster = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///--------------------------------------------复用消息类-------------------------------------------------------
  /// </summary>
  public sealed partial class Point2D : pb::IMessage<Point2D> {
    private static readonly pb::MessageParser<Point2D> _parser = new pb::MessageParser<Point2D>(() => new Point2D());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point2D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2D(Point2D other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point2D Clone() {
      return new Point2D(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point2D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point2D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point2D other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Point3D : pb::IMessage<Point3D> {
    private static readonly pb::MessageParser<Point3D> _parser = new pb::MessageParser<Point3D>(() => new Point3D());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point3D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point3D(Point3D other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point3D Clone() {
      return new Point3D(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point3D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point3D other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      playerId_ = other.playerId_;
      account_ = other.account_;
      name_ = other.name_;
      moveSpeed_ = other.moveSpeed_;
      moveSpeedAddition_ = other.moveSpeedAddition_;
      moveSpeedPercent_ = other.moveSpeedPercent_;
      attackSpeed_ = other.attackSpeed_;
      attackSpeedAddition_ = other.attackSpeedAddition_;
      attackSpeedPercent_ = other.attackSpeedPercent_;
      maxBlood_ = other.maxBlood_;
      nowBlood_ = other.nowBlood_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "moveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 4;
    private int moveSpeed_;
    /// <summary>
    ///基础速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeedAddition" field.</summary>
    public const int MoveSpeedAdditionFieldNumber = 5;
    private int moveSpeedAddition_;
    /// <summary>
    ///固定加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeedAddition {
      get { return moveSpeedAddition_; }
      set {
        moveSpeedAddition_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeedPercent" field.</summary>
    public const int MoveSpeedPercentFieldNumber = 6;
    private int moveSpeedPercent_;
    /// <summary>
    ///百分比加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeedPercent {
      get { return moveSpeedPercent_; }
      set {
        moveSpeedPercent_ = value;
      }
    }

    /// <summary>Field number for the "attackSpeed" field.</summary>
    public const int AttackSpeedFieldNumber = 7;
    private int attackSpeed_;
    /// <summary>
    ///基础攻速
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSpeed {
      get { return attackSpeed_; }
      set {
        attackSpeed_ = value;
      }
    }

    /// <summary>Field number for the "attackSpeedAddition" field.</summary>
    public const int AttackSpeedAdditionFieldNumber = 8;
    private int attackSpeedAddition_;
    /// <summary>
    ///固定加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSpeedAddition {
      get { return attackSpeedAddition_; }
      set {
        attackSpeedAddition_ = value;
      }
    }

    /// <summary>Field number for the "attackSpeedPercent" field.</summary>
    public const int AttackSpeedPercentFieldNumber = 9;
    private int attackSpeedPercent_;
    /// <summary>
    ///百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSpeedPercent {
      get { return attackSpeedPercent_; }
      set {
        attackSpeedPercent_ = value;
      }
    }

    /// <summary>Field number for the "maxBlood" field.</summary>
    public const int MaxBloodFieldNumber = 10;
    private int maxBlood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBlood {
      get { return maxBlood_; }
      set {
        maxBlood_ = value;
      }
    }

    /// <summary>Field number for the "nowBlood" field.</summary>
    public const int NowBloodFieldNumber = 11;
    private int nowBlood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowBlood {
      get { return nowBlood_; }
      set {
        nowBlood_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 12;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Account != other.Account) return false;
      if (Name != other.Name) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (MoveSpeedAddition != other.MoveSpeedAddition) return false;
      if (MoveSpeedPercent != other.MoveSpeedPercent) return false;
      if (AttackSpeed != other.AttackSpeed) return false;
      if (AttackSpeedAddition != other.AttackSpeedAddition) return false;
      if (AttackSpeedPercent != other.AttackSpeedPercent) return false;
      if (MaxBlood != other.MaxBlood) return false;
      if (NowBlood != other.NowBlood) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      if (MoveSpeedAddition != 0) hash ^= MoveSpeedAddition.GetHashCode();
      if (MoveSpeedPercent != 0) hash ^= MoveSpeedPercent.GetHashCode();
      if (AttackSpeed != 0) hash ^= AttackSpeed.GetHashCode();
      if (AttackSpeedAddition != 0) hash ^= AttackSpeedAddition.GetHashCode();
      if (AttackSpeedPercent != 0) hash ^= AttackSpeedPercent.GetHashCode();
      if (MaxBlood != 0) hash ^= MaxBlood.GetHashCode();
      if (NowBlood != 0) hash ^= NowBlood.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MoveSpeed);
      }
      if (MoveSpeedAddition != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MoveSpeedAddition);
      }
      if (MoveSpeedPercent != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MoveSpeedPercent);
      }
      if (AttackSpeed != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AttackSpeed);
      }
      if (AttackSpeedAddition != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AttackSpeedAddition);
      }
      if (AttackSpeedPercent != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AttackSpeedPercent);
      }
      if (MaxBlood != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxBlood);
      }
      if (NowBlood != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(NowBlood);
      }
      if (Type != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (MoveSpeedAddition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeedAddition);
      }
      if (MoveSpeedPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeedPercent);
      }
      if (AttackSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackSpeed);
      }
      if (AttackSpeedAddition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackSpeedAddition);
      }
      if (AttackSpeedPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackSpeedPercent);
      }
      if (MaxBlood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBlood);
      }
      if (NowBlood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowBlood);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.MoveSpeedAddition != 0) {
        MoveSpeedAddition = other.MoveSpeedAddition;
      }
      if (other.MoveSpeedPercent != 0) {
        MoveSpeedPercent = other.MoveSpeedPercent;
      }
      if (other.AttackSpeed != 0) {
        AttackSpeed = other.AttackSpeed;
      }
      if (other.AttackSpeedAddition != 0) {
        AttackSpeedAddition = other.AttackSpeedAddition;
      }
      if (other.AttackSpeedPercent != 0) {
        AttackSpeedPercent = other.AttackSpeedPercent;
      }
      if (other.MaxBlood != 0) {
        MaxBlood = other.MaxBlood;
      }
      if (other.NowBlood != 0) {
        NowBlood = other.NowBlood;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 40: {
            MoveSpeedAddition = input.ReadInt32();
            break;
          }
          case 48: {
            MoveSpeedPercent = input.ReadInt32();
            break;
          }
          case 56: {
            AttackSpeed = input.ReadInt32();
            break;
          }
          case 64: {
            AttackSpeedAddition = input.ReadInt32();
            break;
          }
          case 72: {
            AttackSpeedPercent = input.ReadInt32();
            break;
          }
          case 80: {
            MaxBlood = input.ReadInt32();
            break;
          }
          case 88: {
            NowBlood = input.ReadInt32();
            break;
          }
          case 96: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterInfo : pb::IMessage<MonsterInfo> {
    private static readonly pb::MessageParser<MonsterInfo> _parser = new pb::MessageParser<MonsterInfo>(() => new MonsterInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterInfo(MonsterInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      moveSpeed_ = other.moveSpeed_;
      moveSpeedAddition_ = other.moveSpeedAddition_;
      moveSpeedPercent_ = other.moveSpeedPercent_;
      attackSpeed_ = other.attackSpeed_;
      attackSpeedAddition_ = other.attackSpeedAddition_;
      attackSpeedPercent_ = other.attackSpeedPercent_;
      maxBlood_ = other.maxBlood_;
      nowBlood_ = other.nowBlood_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterInfo Clone() {
      return new MonsterInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "moveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 3;
    private int moveSpeed_;
    /// <summary>
    ///基础速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeedAddition" field.</summary>
    public const int MoveSpeedAdditionFieldNumber = 4;
    private int moveSpeedAddition_;
    /// <summary>
    ///固定加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeedAddition {
      get { return moveSpeedAddition_; }
      set {
        moveSpeedAddition_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeedPercent" field.</summary>
    public const int MoveSpeedPercentFieldNumber = 5;
    private int moveSpeedPercent_;
    /// <summary>
    ///百分比加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeedPercent {
      get { return moveSpeedPercent_; }
      set {
        moveSpeedPercent_ = value;
      }
    }

    /// <summary>Field number for the "attackSpeed" field.</summary>
    public const int AttackSpeedFieldNumber = 6;
    private int attackSpeed_;
    /// <summary>
    ///基础攻速
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSpeed {
      get { return attackSpeed_; }
      set {
        attackSpeed_ = value;
      }
    }

    /// <summary>Field number for the "attackSpeedAddition" field.</summary>
    public const int AttackSpeedAdditionFieldNumber = 7;
    private int attackSpeedAddition_;
    /// <summary>
    ///固定加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSpeedAddition {
      get { return attackSpeedAddition_; }
      set {
        attackSpeedAddition_ = value;
      }
    }

    /// <summary>Field number for the "attackSpeedPercent" field.</summary>
    public const int AttackSpeedPercentFieldNumber = 8;
    private int attackSpeedPercent_;
    /// <summary>
    ///百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackSpeedPercent {
      get { return attackSpeedPercent_; }
      set {
        attackSpeedPercent_ = value;
      }
    }

    /// <summary>Field number for the "maxBlood" field.</summary>
    public const int MaxBloodFieldNumber = 9;
    private int maxBlood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBlood {
      get { return maxBlood_; }
      set {
        maxBlood_ = value;
      }
    }

    /// <summary>Field number for the "nowBlood" field.</summary>
    public const int NowBloodFieldNumber = 10;
    private int nowBlood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NowBlood {
      get { return nowBlood_; }
      set {
        nowBlood_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 11;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MoveSpeed != other.MoveSpeed) return false;
      if (MoveSpeedAddition != other.MoveSpeedAddition) return false;
      if (MoveSpeedPercent != other.MoveSpeedPercent) return false;
      if (AttackSpeed != other.AttackSpeed) return false;
      if (AttackSpeedAddition != other.AttackSpeedAddition) return false;
      if (AttackSpeedPercent != other.AttackSpeedPercent) return false;
      if (MaxBlood != other.MaxBlood) return false;
      if (NowBlood != other.NowBlood) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MoveSpeed != 0) hash ^= MoveSpeed.GetHashCode();
      if (MoveSpeedAddition != 0) hash ^= MoveSpeedAddition.GetHashCode();
      if (MoveSpeedPercent != 0) hash ^= MoveSpeedPercent.GetHashCode();
      if (AttackSpeed != 0) hash ^= AttackSpeed.GetHashCode();
      if (AttackSpeedAddition != 0) hash ^= AttackSpeedAddition.GetHashCode();
      if (AttackSpeedPercent != 0) hash ^= AttackSpeedPercent.GetHashCode();
      if (MaxBlood != 0) hash ^= MaxBlood.GetHashCode();
      if (NowBlood != 0) hash ^= NowBlood.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MoveSpeed);
      }
      if (MoveSpeedAddition != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MoveSpeedAddition);
      }
      if (MoveSpeedPercent != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MoveSpeedPercent);
      }
      if (AttackSpeed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AttackSpeed);
      }
      if (AttackSpeedAddition != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AttackSpeedAddition);
      }
      if (AttackSpeedPercent != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AttackSpeedPercent);
      }
      if (MaxBlood != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxBlood);
      }
      if (NowBlood != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NowBlood);
      }
      if (Type != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (MoveSpeedAddition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeedAddition);
      }
      if (MoveSpeedPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeedPercent);
      }
      if (AttackSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackSpeed);
      }
      if (AttackSpeedAddition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackSpeedAddition);
      }
      if (AttackSpeedPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackSpeedPercent);
      }
      if (MaxBlood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBlood);
      }
      if (NowBlood != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowBlood);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MoveSpeed != 0) {
        MoveSpeed = other.MoveSpeed;
      }
      if (other.MoveSpeedAddition != 0) {
        MoveSpeedAddition = other.MoveSpeedAddition;
      }
      if (other.MoveSpeedPercent != 0) {
        MoveSpeedPercent = other.MoveSpeedPercent;
      }
      if (other.AttackSpeed != 0) {
        AttackSpeed = other.AttackSpeed;
      }
      if (other.AttackSpeedAddition != 0) {
        AttackSpeedAddition = other.AttackSpeedAddition;
      }
      if (other.AttackSpeedPercent != 0) {
        AttackSpeedPercent = other.AttackSpeedPercent;
      }
      if (other.MaxBlood != 0) {
        MaxBlood = other.MaxBlood;
      }
      if (other.NowBlood != 0) {
        NowBlood = other.NowBlood;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 32: {
            MoveSpeedAddition = input.ReadInt32();
            break;
          }
          case 40: {
            MoveSpeedPercent = input.ReadInt32();
            break;
          }
          case 48: {
            AttackSpeed = input.ReadInt32();
            break;
          }
          case 56: {
            AttackSpeedAddition = input.ReadInt32();
            break;
          }
          case 64: {
            AttackSpeedPercent = input.ReadInt32();
            break;
          }
          case 72: {
            MaxBlood = input.ReadInt32();
            break;
          }
          case 80: {
            NowBlood = input.ReadInt32();
            break;
          }
          case 88: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OperationCommand : pb::IMessage<OperationCommand> {
    private static readonly pb::MessageParser<OperationCommand> _parser = new pb::MessageParser<OperationCommand>(() => new OperationCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperationCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationCommand(OperationCommand other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      data_ = other.data_;
      frame_ = other.frame_;
      frametime_ = other.frametime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationCommand Clone() {
      return new OperationCommand(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    ///帧数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 4;
    private long frame_;
    /// <summary>
    ///所在帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "frametime" field.</summary>
    public const int FrametimeFieldNumber = 5;
    private long frametime_;
    /// <summary>
    ///所在帧的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Frametime {
      get { return frametime_; }
      set {
        frametime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperationCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperationCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      if (Frame != other.Frame) return false;
      if (Frametime != other.Frametime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Frame != 0L) hash ^= Frame.GetHashCode();
      if (Frametime != 0L) hash ^= Frametime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (Frame != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Frame);
      }
      if (Frametime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Frametime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Frame != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Frame);
      }
      if (Frametime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Frametime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperationCommand other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Frame != 0L) {
        Frame = other.Frame;
      }
      if (other.Frametime != 0L) {
        Frametime = other.Frametime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 32: {
            Frame = input.ReadInt64();
            break;
          }
          case 40: {
            Frametime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMD_ReleaseSkill : pb::IMessage<CMD_ReleaseSkill> {
    private static readonly pb::MessageParser<CMD_ReleaseSkill> _parser = new pb::MessageParser<CMD_ReleaseSkill>(() => new CMD_ReleaseSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_ReleaseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_ReleaseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_ReleaseSkill(CMD_ReleaseSkill other) : this() {
      roleId_ = other.roleId_;
      skillId_ = other.skillId_;
      mouseposition_ = other.mouseposition_ != null ? other.mouseposition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_ReleaseSkill Clone() {
      return new CMD_ReleaseSkill(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "mouseposition" field.</summary>
    public const int MousepositionFieldNumber = 3;
    private global::PBMessage.Point3D mouseposition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBMessage.Point3D Mouseposition {
      get { return mouseposition_; }
      set {
        mouseposition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_ReleaseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_ReleaseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (SkillId != other.SkillId) return false;
      if (!object.Equals(Mouseposition, other.Mouseposition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (mouseposition_ != null) hash ^= Mouseposition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (mouseposition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mouseposition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (mouseposition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mouseposition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_ReleaseSkill other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.mouseposition_ != null) {
        if (mouseposition_ == null) {
          Mouseposition = new global::PBMessage.Point3D();
        }
        Mouseposition.MergeFrom(other.Mouseposition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
          case 26: {
            if (mouseposition_ == null) {
              Mouseposition = new global::PBMessage.Point3D();
            }
            input.ReadMessage(Mouseposition);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMD_MoveToPoint : pb::IMessage<CMD_MoveToPoint> {
    private static readonly pb::MessageParser<CMD_MoveToPoint> _parser = new pb::MessageParser<CMD_MoveToPoint>(() => new CMD_MoveToPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_MoveToPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_MoveToPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_MoveToPoint(CMD_MoveToPoint other) : this() {
      roleId_ = other.roleId_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      destination_ = other.destination_ != null ? other.destination_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_MoveToPoint Clone() {
      return new CMD_MoveToPoint(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::PBMessage.Point3D position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBMessage.Point3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::PBMessage.Point3D direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBMessage.Point3D Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 4;
    private global::PBMessage.Point3D destination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBMessage.Point3D Destination {
      get { return destination_; }
      set {
        destination_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_MoveToPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_MoveToPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!object.Equals(Destination, other.Destination)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (destination_ != null) hash ^= Destination.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Direction);
      }
      if (destination_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Destination);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (destination_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Destination);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_MoveToPoint other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::PBMessage.Point3D();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::PBMessage.Point3D();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.destination_ != null) {
        if (destination_ == null) {
          Destination = new global::PBMessage.Point3D();
        }
        Destination.MergeFrom(other.Destination);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::PBMessage.Point3D();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (direction_ == null) {
              Direction = new global::PBMessage.Point3D();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 34: {
            if (destination_ == null) {
              Destination = new global::PBMessage.Point3D();
            }
            input.ReadMessage(Destination);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CMD_CreateMonster : pb::IMessage<CMD_CreateMonster> {
    private static readonly pb::MessageParser<CMD_CreateMonster> _parser = new pb::MessageParser<CMD_CreateMonster>(() => new CMD_CreateMonster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_CreateMonster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_CreateMonster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_CreateMonster(CMD_CreateMonster other) : this() {
      id_ = other.id_;
      monster_ = other.monster_ != null ? other.monster_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_CreateMonster Clone() {
      return new CMD_CreateMonster(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "monster" field.</summary>
    public const int MonsterFieldNumber = 2;
    private global::PBMessage.MonsterInfo monster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBMessage.MonsterInfo Monster {
      get { return monster_; }
      set {
        monster_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::PBMessage.Point3D position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBMessage.Point3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private global::PBMessage.Point3D direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBMessage.Point3D Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_CreateMonster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_CreateMonster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Monster, other.Monster)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (monster_ != null) hash ^= Monster.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (monster_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Monster);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (monster_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Monster);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_CreateMonster other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.monster_ != null) {
        if (monster_ == null) {
          Monster = new global::PBMessage.MonsterInfo();
        }
        Monster.MergeFrom(other.Monster);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::PBMessage.Point3D();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::PBMessage.Point3D();
        }
        Direction.MergeFrom(other.Direction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (monster_ == null) {
              Monster = new global::PBMessage.MonsterInfo();
            }
            input.ReadMessage(Monster);
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::PBMessage.Point3D();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (direction_ == null) {
              Direction = new global::PBMessage.Point3D();
            }
            input.ReadMessage(Direction);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 注册请求
  /// </summary>
  public sealed partial class RequestRegigter : pb::IMessage<RequestRegigter> {
    private static readonly pb::MessageParser<RequestRegigter> _parser = new pb::MessageParser<RequestRegigter>(() => new RequestRegigter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestRegigter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRegigter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRegigter(RequestRegigter other) : this() {
      account_ = other.account_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRegigter Clone() {
      return new RequestRegigter(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestRegigter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestRegigter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestRegigter other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 注册反馈
  /// </summary>
  public sealed partial class ResponseRegister : pb::IMessage<ResponseRegister> {
    private static readonly pb::MessageParser<ResponseRegister> _parser = new pb::MessageParser<ResponseRegister>(() => new ResponseRegister());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseRegister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseRegister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseRegister(ResponseRegister other) : this() {
      result_ = other.result_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseRegister Clone() {
      return new ResponseRegister(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseRegister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseRegister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseRegister other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录请求
  /// </summary>
  public sealed partial class RequestLogin : pb::IMessage<RequestLogin> {
    private static readonly pb::MessageParser<RequestLogin> _parser = new pb::MessageParser<RequestLogin>(() => new RequestLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLogin(RequestLogin other) : this() {
      token_ = other.token_;
      account_ = other.account_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestLogin Clone() {
      return new RequestLogin(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestLogin other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录反馈
  /// </summary>
  public sealed partial class ResponseLogin : pb::IMessage<ResponseLogin> {
    private static readonly pb::MessageParser<ResponseLogin> _parser = new pb::MessageParser<ResponseLogin>(() => new ResponseLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseLogin(ResponseLogin other) : this() {
      result_ = other.result_;
      token_ = other.token_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseLogin Clone() {
      return new ResponseLogin(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Token != other.Token) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseLogin other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求匹配
  /// </summary>
  public sealed partial class RequestMatch : pb::IMessage<RequestMatch> {
    private static readonly pb::MessageParser<RequestMatch> _parser = new pb::MessageParser<RequestMatch>(() => new RequestMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestMatch(RequestMatch other) : this() {
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestMatch Clone() {
      return new RequestMatch(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestMatch other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求匹配反馈
  /// </summary>
  public sealed partial class ResponseRequestMatch : pb::IMessage<ResponseRequestMatch> {
    private static readonly pb::MessageParser<ResponseRequestMatch> _parser = new pb::MessageParser<ResponseRequestMatch>(() => new ResponseRequestMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseRequestMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseRequestMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseRequestMatch(ResponseRequestMatch other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseRequestMatch Clone() {
      return new ResponseRequestMatch(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseRequestMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseRequestMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseRequestMatch other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 取消匹配
  /// </summary>
  public sealed partial class RequestCancelMatch : pb::IMessage<RequestCancelMatch> {
    private static readonly pb::MessageParser<RequestCancelMatch> _parser = new pb::MessageParser<RequestCancelMatch>(() => new RequestCancelMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestCancelMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCancelMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCancelMatch(RequestCancelMatch other) : this() {
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCancelMatch Clone() {
      return new RequestCancelMatch(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestCancelMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestCancelMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestCancelMatch other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 取消匹配反馈
  /// </summary>
  public sealed partial class ResponseCancelMatch : pb::IMessage<ResponseCancelMatch> {
    private static readonly pb::MessageParser<ResponseCancelMatch> _parser = new pb::MessageParser<ResponseCancelMatch>(() => new ResponseCancelMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseCancelMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCancelMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCancelMatch(ResponseCancelMatch other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCancelMatch Clone() {
      return new ResponseCancelMatch(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseCancelMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseCancelMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseCancelMatch other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 广播  进入战场准备房间
  /// </summary>
  public sealed partial class BroadEnterReadyRoom : pb::IMessage<BroadEnterReadyRoom> {
    private static readonly pb::MessageParser<BroadEnterReadyRoom> _parser = new pb::MessageParser<BroadEnterReadyRoom>(() => new BroadEnterReadyRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadEnterReadyRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadEnterReadyRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadEnterReadyRoom(BroadEnterReadyRoom other) : this() {
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadEnterReadyRoom Clone() {
      return new BroadEnterReadyRoom(this);
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PBMessage.PlayerInfo> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(10, global::PBMessage.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::PBMessage.PlayerInfo> commands_ = new pbc::RepeatedField<global::PBMessage.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBMessage.PlayerInfo> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadEnterReadyRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadEnterReadyRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadEnterReadyRoom other) {
      if (other == null) {
        return;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间被操作请求
  /// </summary>
  public sealed partial class RequestRoomOperation : pb::IMessage<RequestRoomOperation> {
    private static readonly pb::MessageParser<RequestRoomOperation> _parser = new pb::MessageParser<RequestRoomOperation>(() => new RequestRoomOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestRoomOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRoomOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRoomOperation(RequestRoomOperation other) : this() {
      token_ = other.token_;
      opType_ = other.opType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestRoomOperation Clone() {
      return new RequestRoomOperation(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 2;
    private int opType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestRoomOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestRoomOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (OpType != other.OpType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (OpType != 0) hash ^= OpType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (OpType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OpType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestRoomOperation other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            OpType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 广播  玩家在准备房间内的操作
  /// </summary>
  public sealed partial class BroadRoomOperation : pb::IMessage<BroadRoomOperation> {
    private static readonly pb::MessageParser<BroadRoomOperation> _parser = new pb::MessageParser<BroadRoomOperation>(() => new BroadRoomOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadRoomOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadRoomOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadRoomOperation(BroadRoomOperation other) : this() {
      playerId_ = other.playerId_;
      operationType_ = other.operationType_;
      operationParameter_ = other.operationParameter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadRoomOperation Clone() {
      return new BroadRoomOperation(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "operationType" field.</summary>
    public const int OperationTypeFieldNumber = 2;
    private int operationType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperationType {
      get { return operationType_; }
      set {
        operationType_ = value;
      }
    }

    /// <summary>Field number for the "operationParameter" field.</summary>
    public const int OperationParameterFieldNumber = 3;
    private pb::ByteString operationParameter_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OperationParameter {
      get { return operationParameter_; }
      set {
        operationParameter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadRoomOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadRoomOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (OperationType != other.OperationType) return false;
      if (OperationParameter != other.OperationParameter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (OperationType != 0) hash ^= OperationType.GetHashCode();
      if (OperationParameter.Length != 0) hash ^= OperationParameter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (OperationType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OperationType);
      }
      if (OperationParameter.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(OperationParameter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (OperationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationType);
      }
      if (OperationParameter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OperationParameter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadRoomOperation other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.OperationType != 0) {
        OperationType = other.OperationType;
      }
      if (other.OperationParameter.Length != 0) {
        OperationParameter = other.OperationParameter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            OperationType = input.ReadInt32();
            break;
          }
          case 26: {
            OperationParameter = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 广播 玩家准备完成
  /// </summary>
  public sealed partial class BroadPlayerReady : pb::IMessage<BroadPlayerReady> {
    private static readonly pb::MessageParser<BroadPlayerReady> _parser = new pb::MessageParser<BroadPlayerReady>(() => new BroadPlayerReady());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadPlayerReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerReady(BroadPlayerReady other) : this() {
      roleId_ = other.roleId_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerReady Clone() {
      return new BroadPlayerReady(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::PBMessage.Point3D position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBMessage.Point3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::PBMessage.Point3D direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBMessage.Point3D Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadPlayerReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadPlayerReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadPlayerReady other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::PBMessage.Point3D();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::PBMessage.Point3D();
        }
        Direction.MergeFrom(other.Direction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::PBMessage.Point3D();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (direction_ == null) {
              Direction = new global::PBMessage.Point3D();
            }
            input.ReadMessage(Direction);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 广播  游戏开始
  /// </summary>
  public sealed partial class BroadBattleGameStart : pb::IMessage<BroadBattleGameStart> {
    private static readonly pb::MessageParser<BroadBattleGameStart> _parser = new pb::MessageParser<BroadBattleGameStart>(() => new BroadBattleGameStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadBattleGameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadBattleGameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadBattleGameStart(BroadBattleGameStart other) : this() {
      battleID_ = other.battleID_;
      randSeed_ = other.randSeed_;
      udpPort_ = other.udpPort_;
      frameInterval_ = other.frameInterval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadBattleGameStart Clone() {
      return new BroadBattleGameStart(this);
    }

    /// <summary>Field number for the "battleID" field.</summary>
    public const int BattleIDFieldNumber = 1;
    private int battleID_;
    /// <summary>
    /// 战场Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleID {
      get { return battleID_; }
      set {
        battleID_ = value;
      }
    }

    /// <summary>Field number for the "randSeed" field.</summary>
    public const int RandSeedFieldNumber = 2;
    private int randSeed_;
    /// <summary>
    /// 随机数种子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandSeed {
      get { return randSeed_; }
      set {
        randSeed_ = value;
      }
    }

    /// <summary>Field number for the "udpPort" field.</summary>
    public const int UdpPortFieldNumber = 3;
    private int udpPort_;
    /// <summary>
    /// UDP端口号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UdpPort {
      get { return udpPort_; }
      set {
        udpPort_ = value;
      }
    }

    /// <summary>Field number for the "frameInterval" field.</summary>
    public const int FrameIntervalFieldNumber = 4;
    private int frameInterval_;
    /// <summary>
    /// 帧时间 毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameInterval {
      get { return frameInterval_; }
      set {
        frameInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadBattleGameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadBattleGameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleID != other.BattleID) return false;
      if (RandSeed != other.RandSeed) return false;
      if (UdpPort != other.UdpPort) return false;
      if (FrameInterval != other.FrameInterval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleID != 0) hash ^= BattleID.GetHashCode();
      if (RandSeed != 0) hash ^= RandSeed.GetHashCode();
      if (UdpPort != 0) hash ^= UdpPort.GetHashCode();
      if (FrameInterval != 0) hash ^= FrameInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleID);
      }
      if (RandSeed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RandSeed);
      }
      if (UdpPort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UdpPort);
      }
      if (FrameInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FrameInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleID);
      }
      if (RandSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandSeed);
      }
      if (UdpPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UdpPort);
      }
      if (FrameInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadBattleGameStart other) {
      if (other == null) {
        return;
      }
      if (other.BattleID != 0) {
        BattleID = other.BattleID;
      }
      if (other.RandSeed != 0) {
        RandSeed = other.RandSeed;
      }
      if (other.UdpPort != 0) {
        UdpPort = other.UdpPort;
      }
      if (other.FrameInterval != 0) {
        FrameInterval = other.FrameInterval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleID = input.ReadInt32();
            break;
          }
          case 16: {
            RandSeed = input.ReadInt32();
            break;
          }
          case 24: {
            UdpPort = input.ReadInt32();
            break;
          }
          case 32: {
            FrameInterval = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家操作
  /// </summary>
  public sealed partial class PlayerFrameCommand : pb::IMessage<PlayerFrameCommand> {
    private static readonly pb::MessageParser<PlayerFrameCommand> _parser = new pb::MessageParser<PlayerFrameCommand>(() => new PlayerFrameCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerFrameCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFrameCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFrameCommand(PlayerFrameCommand other) : this() {
      token_ = other.token_;
      roleId_ = other.roleId_;
      frame_ = other.frame_;
      frametime_ = other.frametime_;
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFrameCommand Clone() {
      return new PlayerFrameCommand(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 3;
    private long frame_;
    /// <summary>
    /// 客户端当前帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "frametime" field.</summary>
    public const int FrametimeFieldNumber = 4;
    private long frametime_;
    /// <summary>
    /// 所在帧的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Frametime {
      get { return frametime_; }
      set {
        frametime_ = value;
      }
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PBMessage.OperationCommand> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(42, global::PBMessage.OperationCommand.Parser);
    private readonly pbc::RepeatedField<global::PBMessage.OperationCommand> commands_ = new pbc::RepeatedField<global::PBMessage.OperationCommand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBMessage.OperationCommand> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerFrameCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerFrameCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RoleId != other.RoleId) return false;
      if (Frame != other.Frame) return false;
      if (Frametime != other.Frametime) return false;
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (Frame != 0L) hash ^= Frame.GetHashCode();
      if (Frametime != 0L) hash ^= Frametime.GetHashCode();
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RoleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoleId);
      }
      if (Frame != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Frame);
      }
      if (Frametime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Frametime);
      }
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (Frame != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Frame);
      }
      if (Frametime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Frametime);
      }
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerFrameCommand other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.Frame != 0L) {
        Frame = other.Frame;
      }
      if (other.Frametime != 0L) {
        Frametime = other.Frametime;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            RoleId = input.ReadInt32();
            break;
          }
          case 24: {
            Frame = input.ReadInt64();
            break;
          }
          case 32: {
            Frametime = input.ReadInt64();
            break;
          }
          case 42: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 广播 玩家操作
  /// </summary>
  public sealed partial class BroadPlayerFrameCommand : pb::IMessage<BroadPlayerFrameCommand> {
    private static readonly pb::MessageParser<BroadPlayerFrameCommand> _parser = new pb::MessageParser<BroadPlayerFrameCommand>(() => new BroadPlayerFrameCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadPlayerFrameCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerFrameCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerFrameCommand(BroadPlayerFrameCommand other) : this() {
      frame_ = other.frame_;
      frametime_ = other.frametime_;
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerFrameCommand Clone() {
      return new BroadPlayerFrameCommand(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private long frame_;
    /// <summary>
    /// 服务器当前帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "frametime" field.</summary>
    public const int FrametimeFieldNumber = 2;
    private long frametime_;
    /// <summary>
    /// 所在帧的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Frametime {
      get { return frametime_; }
      set {
        frametime_ = value;
      }
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PBMessage.OperationCommand> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(34, global::PBMessage.OperationCommand.Parser);
    private readonly pbc::RepeatedField<global::PBMessage.OperationCommand> commands_ = new pbc::RepeatedField<global::PBMessage.OperationCommand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBMessage.OperationCommand> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadPlayerFrameCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadPlayerFrameCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (Frametime != other.Frametime) return false;
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0L) hash ^= Frame.GetHashCode();
      if (Frametime != 0L) hash ^= Frametime.GetHashCode();
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Frame);
      }
      if (Frametime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Frametime);
      }
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Frame);
      }
      if (Frametime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Frametime);
      }
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadPlayerFrameCommand other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0L) {
        Frame = other.Frame;
      }
      if (other.Frametime != 0L) {
        Frametime = other.Frametime;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Frame = input.ReadInt64();
            break;
          }
          case 16: {
            Frametime = input.ReadInt64();
            break;
          }
          case 34: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求服务器下发丢失帧
  /// </summary>
  public sealed partial class RequestDeltaFrames : pb::IMessage<RequestDeltaFrames> {
    private static readonly pb::MessageParser<RequestDeltaFrames> _parser = new pb::MessageParser<RequestDeltaFrames>(() => new RequestDeltaFrames());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestDeltaFrames> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestDeltaFrames() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestDeltaFrames(RequestDeltaFrames other) : this() {
      token_ = other.token_;
      roleId_ = other.roleId_;
      deltaStartFrame_ = other.deltaStartFrame_;
      deltaStartFrametime_ = other.deltaStartFrametime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestDeltaFrames Clone() {
      return new RequestDeltaFrames(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "DeltaStartFrame" field.</summary>
    public const int DeltaStartFrameFieldNumber = 3;
    private long deltaStartFrame_;
    /// <summary>
    /// 丢失帧开始帧
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeltaStartFrame {
      get { return deltaStartFrame_; }
      set {
        deltaStartFrame_ = value;
      }
    }

    /// <summary>Field number for the "DeltaStartFrametime" field.</summary>
    public const int DeltaStartFrametimeFieldNumber = 4;
    private long deltaStartFrametime_;
    /// <summary>
    /// 丢失帧所在帧的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeltaStartFrametime {
      get { return deltaStartFrametime_; }
      set {
        deltaStartFrametime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestDeltaFrames);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestDeltaFrames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RoleId != other.RoleId) return false;
      if (DeltaStartFrame != other.DeltaStartFrame) return false;
      if (DeltaStartFrametime != other.DeltaStartFrametime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (DeltaStartFrame != 0L) hash ^= DeltaStartFrame.GetHashCode();
      if (DeltaStartFrametime != 0L) hash ^= DeltaStartFrametime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RoleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoleId);
      }
      if (DeltaStartFrame != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DeltaStartFrame);
      }
      if (DeltaStartFrametime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DeltaStartFrametime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (DeltaStartFrame != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeltaStartFrame);
      }
      if (DeltaStartFrametime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeltaStartFrametime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestDeltaFrames other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.DeltaStartFrame != 0L) {
        DeltaStartFrame = other.DeltaStartFrame;
      }
      if (other.DeltaStartFrametime != 0L) {
        DeltaStartFrametime = other.DeltaStartFrametime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            RoleId = input.ReadInt32();
            break;
          }
          case 24: {
            DeltaStartFrame = input.ReadInt64();
            break;
          }
          case 32: {
            DeltaStartFrametime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器下发丢失帧 反馈
  /// </summary>
  public sealed partial class ResponseDeltaFrames : pb::IMessage<ResponseDeltaFrames> {
    private static readonly pb::MessageParser<ResponseDeltaFrames> _parser = new pb::MessageParser<ResponseDeltaFrames>(() => new ResponseDeltaFrames());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseDeltaFrames> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseDeltaFrames() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseDeltaFrames(ResponseDeltaFrames other) : this() {
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseDeltaFrames Clone() {
      return new ResponseDeltaFrames(this);
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PBMessage.BroadPlayerFrameCommand> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(10, global::PBMessage.BroadPlayerFrameCommand.Parser);
    private readonly pbc::RepeatedField<global::PBMessage.BroadPlayerFrameCommand> commands_ = new pbc::RepeatedField<global::PBMessage.BroadPlayerFrameCommand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBMessage.BroadPlayerFrameCommand> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseDeltaFrames);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseDeltaFrames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseDeltaFrames other) {
      if (other == null) {
        return;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 广播 玩家断开连接
  /// </summary>
  public sealed partial class BroadPlayerDisConnect : pb::IMessage<BroadPlayerDisConnect> {
    private static readonly pb::MessageParser<BroadPlayerDisConnect> _parser = new pb::MessageParser<BroadPlayerDisConnect>(() => new BroadPlayerDisConnect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadPlayerDisConnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerDisConnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerDisConnect(BroadPlayerDisConnect other) : this() {
      roleId_ = other.roleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerDisConnect Clone() {
      return new BroadPlayerDisConnect(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadPlayerDisConnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadPlayerDisConnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadPlayerDisConnect other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 广播 玩家重新连接
  /// </summary>
  public sealed partial class BroadPlayerReConnect : pb::IMessage<BroadPlayerReConnect> {
    private static readonly pb::MessageParser<BroadPlayerReConnect> _parser = new pb::MessageParser<BroadPlayerReConnect>(() => new BroadPlayerReConnect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadPlayerReConnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerReConnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerReConnect(BroadPlayerReConnect other) : this() {
      roleId_ = other.roleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadPlayerReConnect Clone() {
      return new BroadPlayerReConnect(this);
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadPlayerReConnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadPlayerReConnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadPlayerReConnect other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 广播 游戏结束
  /// </summary>
  public sealed partial class BroadGameOver : pb::IMessage<BroadGameOver> {
    private static readonly pb::MessageParser<BroadGameOver> _parser = new pb::MessageParser<BroadGameOver>(() => new BroadGameOver());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadGameOver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadGameOver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadGameOver(BroadGameOver other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadGameOver Clone() {
      return new BroadGameOver(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadGameOver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadGameOver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadGameOver other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RequestPing : pb::IMessage<RequestPing> {
    private static readonly pb::MessageParser<RequestPing> _parser = new pb::MessageParser<RequestPing>(() => new RequestPing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPing(RequestPing other) : this() {
      uid_ = other.uid_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestPing Clone() {
      return new RequestPing(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestPing other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponsePing : pb::IMessage<ResponsePing> {
    private static readonly pb::MessageParser<ResponsePing> _parser = new pb::MessageParser<ResponsePing>(() => new ResponsePing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponsePing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBMessage.PBMessageReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsePing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsePing(ResponsePing other) : this() {
      uid_ = other.uid_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponsePing Clone() {
      return new ResponsePing(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponsePing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponsePing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponsePing other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
