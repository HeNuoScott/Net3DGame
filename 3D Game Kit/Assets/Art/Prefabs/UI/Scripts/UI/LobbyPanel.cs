//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework.HeNuoApp
{
    using Client;
    using Net.Server;
    using Net.Share;
    using QF.Extensions;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.SceneManagement;
    using UnityEngine.UI;
    
    
    public class LobbyPanelData : QFramework.UIPanelData
    {
        //网络场景信息
        public Dictionary<string, RoomInfo> netScenes = new Dictionary<string, RoomInfo>();
        //信息面板显示信息
        public Dictionary<string, ScenePanel> ScenePanels = new Dictionary<string, ScenePanel>();
    }
    
    public partial class LobbyPanel : QFramework.UIPanel
    {
        
        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as LobbyPanelData ?? new LobbyPanelData();
            // please add init code here
            RoomManager.Instance.CreateRoomCallback += Instance_RoomOperationCallback;
            RoomManager.Instance.JoinRoomRoomCallback += Instance_JoinRoomRoomCallback;
            //接收聊天消息
            Client.ChatManager.ShowMassage += ChatManager_ShowMassage;

            //获取用户信息
            StartCoroutine(GetUserInfo());
            //发送消息
            Button_Send.onClick.AddListener(() =>
            {
                string msg = InputField_Msg.text.Trim();
                if (msg != null && msg != "")
                {
                    Client.ChatManager.Instance.SendMsg(msg);
                    InputField_Msg.text = "";
                }
            });
            //接收场景信息
            Client.ClientNetworkManager.UndataNetScenes += ClientNetworkManager_UndataNetScenes;
            //创建房间
            Button_CreateRoom.onClick.AddListener(() =>
            {
                string roomName = InputField_RoomName.text.Trim();
                
                if (roomName == null || roomName == "")
                {
                    NetMassageManager.OpenMessage("房间名称不能为空!");
                    return;
                }
                if (InputField_RoomCapacity.text == "")
                {
                    NetMassageManager.OpenMessage("请输入房间最大人数!");
                    return;
                }
                int capacity = int.Parse(InputField_RoomCapacity.text);
                if (capacity>8)
                {
                    NetMassageManager.OpenMessage("房间最大人数是8人!");
                    return;
                }
                //创建房间目前只有一种(GameScene)
                RoomManager.Instance.CreateRoom(roomName, capacity,"GameScene");
            });
        }



        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
            //Debug.Log("卸载注册事件");
            Client.ChatManager.ShowMassage -= ChatManager_ShowMassage;
            Client.ClientNetworkManager.UndataNetScenes -= ClientNetworkManager_UndataNetScenes;
            RoomManager.Instance.CreateRoomCallback -= Instance_RoomOperationCallback;
            RoomManager.Instance.JoinRoomRoomCallback -= Instance_JoinRoomRoomCallback;
        }

        private IEnumerator GetUserInfo()
        {
            bool isGetUserInfo = false;
            while (!isGetUserInfo)
            {
                if (Client.ClientNetworkManager.Instance.Acc == "" || Client.ClientNetworkManager.Instance.Acc == null)
                {
                    yield return new WaitForSeconds(5);
                }
                else
                {
                    PlayerName_Text.text = Client.ClientNetworkManager.Instance.Acc;
                    isGetUserInfo = true;
                    yield break;
                }
            }
        }

        private void ChatManager_ShowMassage(string msg)
        {
            MsgContent.text += msg;
        }

        private void ClientNetworkManager_UndataNetScenes(Dictionary<string, RoomInfo> scenes)
        {
            Dictionary<string, RoomInfo> needDelScene = new Dictionary<string, RoomInfo>();
            //-----------------------------场景信息对比---------------------------------
            //1.
            //遍历现有的场景信息去对比 新得到的场景信息,
            //如有现有的信息在 新来的场景信息中找不到说明场景已经销毁  删除场景
            foreach (var item in mData.netScenes)
            {
                if (!scenes.ContainsKey(item.Key))
                {
                    needDelScene.Add(item.Key,item.Value);
                }
            }
            foreach (var sceneName in needDelScene)
            {
                mData.netScenes.Remove(sceneName.Key);
            }
            //2.
            //遍历新来的场景信息  对比刚刚删除 销毁掉场景之后的场景信息
            //如果 有对应场景  查看更改
            //如果没有对应场景  新增场景
            //Debug.Log("收到场景消息");
            foreach (var newScene in scenes)
            {
                if (!mData.netScenes.ContainsKey(newScene.Key))
                {
                    mData.netScenes.Add(newScene.Key, newScene.Value);
                }
                else
                {
                    mData.netScenes[newScene.Key] = newScene.Value;
                }
            }
            //-----------------------------显示信息更改-----------------------------------
            foreach (var item in needDelScene)
            {
                if (mData.ScenePanels.ContainsKey(item.Key))
                {
                    ScenePanel scenePanel = mData.ScenePanels[item.Key];
                    mData.ScenePanels.Remove(item.Key);
                    Destroy(scenePanel.gameObject);
                }
            }
            foreach (var item in mData.netScenes)
            {
                if (item.Key!= "MainScene")//不等于大厅 就展示
                {
                    if (mData.ScenePanels.ContainsKey(item.Key))
                    {
                        mData.ScenePanels[item.Key].ChangeInfo(item.Value);
                    }
                    else
                    {
                        ScenePanel.Instantiate()
                                  .Parent(SceneContent)
                                  .LocalIdentity()
                                  .ApplySelfTo((self) => self.Init(item.Key, item.Value))
                                  .ApplySelfTo((self) => mData.ScenePanels.Add(item.Key, self))
                                  .Show();
                    }
                }

            }

        }

        //创建房间成功
        private void Instance_RoomOperationCallback(RoomOperationCode callbackCode)
        {
            Debug.Log("创建房间成功");
            QF.LSM.LoadSceneManager.Instance.LoadSceneAsync(true, callbackCode.targetScene, "ChatPanel", UILevel.Common);
        }
        //加入房间成功
        private void Instance_JoinRoomRoomCallback(RoomOperationCode callbackCode)
        {
            Debug.Log("加入房间成功");
            QF.LSM.LoadSceneManager.Instance.LoadSceneAsync(true, callbackCode.targetScene, "ChatPanel", UILevel.Common);
        }
    }
}
