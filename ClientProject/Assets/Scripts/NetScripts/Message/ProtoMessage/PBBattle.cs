// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PBBattle.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PBBattle {

  /// <summary>Holder for reflection information generated from PBBattle.proto</summary>
  public static partial class PBBattleReflection {

    #region Descriptor
    /// <summary>File descriptor for PBBattle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PBBattleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5QQkJhdHRsZS5wcm90bxIIUEJCYXR0bGUiPwoOQmF0dGxlVXNlckluZm8S",
            "CwoDdWlkGAEgASgFEhAKCGJhdHRsZUlEGAIgASgFEg4KBnJvbGVJRBgDIAEo",
            "BSJVCg5UY3BFbnRlckJhdHRsZRIQCghyYW5kU2VlZBgBIAEoBRIxCg9iYXR0",
            "bGVVc2Vyc0luZm8YAiADKAsyGC5QQkJhdHRsZS5CYXR0bGVVc2VySW5mbyIv",
            "Cg5VZHBCYXR0bGVSZWFkeRILCgN1aWQYASABKAUSEAoIYmF0dGxlSUQYAiAB",
            "KAUiEAoOVWRwQmF0dGxlU3RhcnQipwEKD1BsYXllck9wZXJhdGlvbhIQCghi",
            "YXR0bGVJRBgBIAEoBRIMCgRtb3ZlGAIgASgFEhMKC29wZXJhdGlvbklEGAMg",
            "ASgFEi0KDnJpZ2h0T3BlcmF0aW9uGAQgASgOMhUuUEJCYXR0bGUuUmlnaHRP",
            "cFR5cGUSFwoPb3BlcmF0aW9uVmFsdWUxGAUgASgFEhcKD29wZXJhdGlvblZh",
            "bHVlMhgGIAEoBSJUChVVZHBVcFBsYXllck9wZXJhdGlvbnMSDQoFbWVzSUQY",
            "ASABKAUSLAoJb3BlcmF0aW9uGAIgASgLMhkuUEJCYXR0bGUuUGxheWVyT3Bl",
            "cmF0aW9uIkMKEkFsbFBsYXllck9wZXJhdGlvbhItCgpvcGVyYXRpb25zGAEg",
            "AygLMhkuUEJCYXR0bGUuUGxheWVyT3BlcmF0aW9uIlsKFlVkcERvd25GcmFt",
            "ZU9wZXJhdGlvbnMSDwoHZnJhbWVJRBgBIAEoBRIwCgpvcGVyYXRpb25zGAIg",
            "ASgLMhwuUEJCYXR0bGUuQWxsUGxheWVyT3BlcmF0aW9uIjQKEFVkcFVwRGVs",
            "dGFGcmFtZXMSEAoIYmF0dGxlSUQYASABKAUSDgoGZnJhbWVzGAIgAygFIkoK",
            "ElVkcERvd25EZWx0YUZyYW1lcxI0CgpmcmFtZXNEYXRhGAEgAygLMiAuUEJC",
            "YXR0bGUuVWRwRG93bkZyYW1lT3BlcmF0aW9ucyIhCg1VZHBVcEdhbWVPdmVy",
            "EhAKCGJhdHRsZUlEGAEgASgFIhEKD1VkcERvd25HYW1lT3ZlcipdCgtSaWdo",
            "dE9wVHlwZRIICgRub29wEAASCAoEcm9wMRABEggKBHJvcDIQAhIICgRyb3Az",
            "EAMSCAoEcm9wNBAEEggKBHJvcDUQBRIICgRyb3A2EAYSCAoEcm9wNxAHQgJI",
            "A2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PBBattle.RightOpType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.BattleUserInfo), global::PBBattle.BattleUserInfo.Parser, new[]{ "Uid", "BattleID", "RoleID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.TcpEnterBattle), global::PBBattle.TcpEnterBattle.Parser, new[]{ "RandSeed", "BattleUsersInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.UdpBattleReady), global::PBBattle.UdpBattleReady.Parser, new[]{ "Uid", "BattleID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.UdpBattleStart), global::PBBattle.UdpBattleStart.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.PlayerOperation), global::PBBattle.PlayerOperation.Parser, new[]{ "BattleID", "Move", "OperationID", "RightOperation", "OperationValue1", "OperationValue2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.UdpUpPlayerOperations), global::PBBattle.UdpUpPlayerOperations.Parser, new[]{ "MesID", "Operation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.AllPlayerOperation), global::PBBattle.AllPlayerOperation.Parser, new[]{ "Operations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.UdpDownFrameOperations), global::PBBattle.UdpDownFrameOperations.Parser, new[]{ "FrameID", "Operations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.UdpUpDeltaFrames), global::PBBattle.UdpUpDeltaFrames.Parser, new[]{ "BattleID", "Frames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.UdpDownDeltaFrames), global::PBBattle.UdpDownDeltaFrames.Parser, new[]{ "FramesData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.UdpUpGameOver), global::PBBattle.UdpUpGameOver.Parser, new[]{ "BattleID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBBattle.UdpDownGameOver), global::PBBattle.UdpDownGameOver.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RightOpType {
    /// <summary>
    ///没有操作
    /// </summary>
    [pbr::OriginalName("noop")] Noop = 0,
    /// <summary>
    ///操作1
    /// </summary>
    [pbr::OriginalName("rop1")] Rop1 = 1,
    /// <summary>
    ///操作2
    /// </summary>
    [pbr::OriginalName("rop2")] Rop2 = 2,
    /// <summary>
    ///操作3
    /// </summary>
    [pbr::OriginalName("rop3")] Rop3 = 3,
    /// <summary>
    ///操作4
    /// </summary>
    [pbr::OriginalName("rop4")] Rop4 = 4,
    /// <summary>
    ///操作5
    /// </summary>
    [pbr::OriginalName("rop5")] Rop5 = 5,
    /// <summary>
    ///操作6
    /// </summary>
    [pbr::OriginalName("rop6")] Rop6 = 6,
    /// <summary>
    ///操作7
    /// </summary>
    [pbr::OriginalName("rop7")] Rop7 = 7,
  }

  #endregion

  #region Messages
  public sealed partial class BattleUserInfo : pb::IMessage<BattleUserInfo> {
    private static readonly pb::MessageParser<BattleUserInfo> _parser = new pb::MessageParser<BattleUserInfo>(() => new BattleUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleUserInfo(BattleUserInfo other) : this() {
      uid_ = other.uid_;
      battleID_ = other.battleID_;
      roleID_ = other.roleID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleUserInfo Clone() {
      return new BattleUserInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "battleID" field.</summary>
    public const int BattleIDFieldNumber = 2;
    private int battleID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleID {
      get { return battleID_; }
      set {
        battleID_ = value;
      }
    }

    /// <summary>Field number for the "roleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private int roleID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (BattleID != other.BattleID) return false;
      if (RoleID != other.RoleID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (BattleID != 0) hash ^= BattleID.GetHashCode();
      if (RoleID != 0) hash ^= RoleID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (BattleID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BattleID);
      }
      if (RoleID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoleID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (BattleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleID);
      }
      if (RoleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.BattleID != 0) {
        BattleID = other.BattleID;
      }
      if (other.RoleID != 0) {
        RoleID = other.RoleID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            BattleID = input.ReadInt32();
            break;
          }
          case 24: {
            RoleID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TcpEnterBattle : pb::IMessage<TcpEnterBattle> {
    private static readonly pb::MessageParser<TcpEnterBattle> _parser = new pb::MessageParser<TcpEnterBattle>(() => new TcpEnterBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TcpEnterBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpEnterBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpEnterBattle(TcpEnterBattle other) : this() {
      randSeed_ = other.randSeed_;
      battleUsersInfo_ = other.battleUsersInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpEnterBattle Clone() {
      return new TcpEnterBattle(this);
    }

    /// <summary>Field number for the "randSeed" field.</summary>
    public const int RandSeedFieldNumber = 1;
    private int randSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandSeed {
      get { return randSeed_; }
      set {
        randSeed_ = value;
      }
    }

    /// <summary>Field number for the "battleUsersInfo" field.</summary>
    public const int BattleUsersInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PBBattle.BattleUserInfo> _repeated_battleUsersInfo_codec
        = pb::FieldCodec.ForMessage(18, global::PBBattle.BattleUserInfo.Parser);
    private readonly pbc::RepeatedField<global::PBBattle.BattleUserInfo> battleUsersInfo_ = new pbc::RepeatedField<global::PBBattle.BattleUserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBBattle.BattleUserInfo> BattleUsersInfo {
      get { return battleUsersInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TcpEnterBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TcpEnterBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RandSeed != other.RandSeed) return false;
      if(!battleUsersInfo_.Equals(other.battleUsersInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RandSeed != 0) hash ^= RandSeed.GetHashCode();
      hash ^= battleUsersInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RandSeed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RandSeed);
      }
      battleUsersInfo_.WriteTo(output, _repeated_battleUsersInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RandSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandSeed);
      }
      size += battleUsersInfo_.CalculateSize(_repeated_battleUsersInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TcpEnterBattle other) {
      if (other == null) {
        return;
      }
      if (other.RandSeed != 0) {
        RandSeed = other.RandSeed;
      }
      battleUsersInfo_.Add(other.battleUsersInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RandSeed = input.ReadInt32();
            break;
          }
          case 18: {
            battleUsersInfo_.AddEntriesFrom(input, _repeated_battleUsersInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UdpBattleReady : pb::IMessage<UdpBattleReady> {
    private static readonly pb::MessageParser<UdpBattleReady> _parser = new pb::MessageParser<UdpBattleReady>(() => new UdpBattleReady());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UdpBattleReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpBattleReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpBattleReady(UdpBattleReady other) : this() {
      uid_ = other.uid_;
      battleID_ = other.battleID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpBattleReady Clone() {
      return new UdpBattleReady(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "battleID" field.</summary>
    public const int BattleIDFieldNumber = 2;
    private int battleID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleID {
      get { return battleID_; }
      set {
        battleID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UdpBattleReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UdpBattleReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (BattleID != other.BattleID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (BattleID != 0) hash ^= BattleID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (BattleID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BattleID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (BattleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UdpBattleReady other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.BattleID != 0) {
        BattleID = other.BattleID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            BattleID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UdpBattleStart : pb::IMessage<UdpBattleStart> {
    private static readonly pb::MessageParser<UdpBattleStart> _parser = new pb::MessageParser<UdpBattleStart>(() => new UdpBattleStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UdpBattleStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpBattleStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpBattleStart(UdpBattleStart other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpBattleStart Clone() {
      return new UdpBattleStart(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UdpBattleStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UdpBattleStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UdpBattleStart other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerOperation : pb::IMessage<PlayerOperation> {
    private static readonly pb::MessageParser<PlayerOperation> _parser = new pb::MessageParser<PlayerOperation>(() => new PlayerOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOperation(PlayerOperation other) : this() {
      battleID_ = other.battleID_;
      move_ = other.move_;
      operationID_ = other.operationID_;
      rightOperation_ = other.rightOperation_;
      operationValue1_ = other.operationValue1_;
      operationValue2_ = other.operationValue2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOperation Clone() {
      return new PlayerOperation(this);
    }

    /// <summary>Field number for the "battleID" field.</summary>
    public const int BattleIDFieldNumber = 1;
    private int battleID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleID {
      get { return battleID_; }
      set {
        battleID_ = value;
      }
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 2;
    private int move_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Move {
      get { return move_; }
      set {
        move_ = value;
      }
    }

    /// <summary>Field number for the "operationID" field.</summary>
    public const int OperationIDFieldNumber = 3;
    private int operationID_;
    /// <summary>
    ///操作id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperationID {
      get { return operationID_; }
      set {
        operationID_ = value;
      }
    }

    /// <summary>Field number for the "rightOperation" field.</summary>
    public const int RightOperationFieldNumber = 4;
    private global::PBBattle.RightOpType rightOperation_ = global::PBBattle.RightOpType.Noop;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBBattle.RightOpType RightOperation {
      get { return rightOperation_; }
      set {
        rightOperation_ = value;
      }
    }

    /// <summary>Field number for the "operationValue1" field.</summary>
    public const int OperationValue1FieldNumber = 5;
    private int operationValue1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperationValue1 {
      get { return operationValue1_; }
      set {
        operationValue1_ = value;
      }
    }

    /// <summary>Field number for the "operationValue2" field.</summary>
    public const int OperationValue2FieldNumber = 6;
    private int operationValue2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperationValue2 {
      get { return operationValue2_; }
      set {
        operationValue2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleID != other.BattleID) return false;
      if (Move != other.Move) return false;
      if (OperationID != other.OperationID) return false;
      if (RightOperation != other.RightOperation) return false;
      if (OperationValue1 != other.OperationValue1) return false;
      if (OperationValue2 != other.OperationValue2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleID != 0) hash ^= BattleID.GetHashCode();
      if (Move != 0) hash ^= Move.GetHashCode();
      if (OperationID != 0) hash ^= OperationID.GetHashCode();
      if (RightOperation != global::PBBattle.RightOpType.Noop) hash ^= RightOperation.GetHashCode();
      if (OperationValue1 != 0) hash ^= OperationValue1.GetHashCode();
      if (OperationValue2 != 0) hash ^= OperationValue2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleID);
      }
      if (Move != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Move);
      }
      if (OperationID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OperationID);
      }
      if (RightOperation != global::PBBattle.RightOpType.Noop) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RightOperation);
      }
      if (OperationValue1 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OperationValue1);
      }
      if (OperationValue2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OperationValue2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleID);
      }
      if (Move != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Move);
      }
      if (OperationID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationID);
      }
      if (RightOperation != global::PBBattle.RightOpType.Noop) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RightOperation);
      }
      if (OperationValue1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationValue1);
      }
      if (OperationValue2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationValue2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerOperation other) {
      if (other == null) {
        return;
      }
      if (other.BattleID != 0) {
        BattleID = other.BattleID;
      }
      if (other.Move != 0) {
        Move = other.Move;
      }
      if (other.OperationID != 0) {
        OperationID = other.OperationID;
      }
      if (other.RightOperation != global::PBBattle.RightOpType.Noop) {
        RightOperation = other.RightOperation;
      }
      if (other.OperationValue1 != 0) {
        OperationValue1 = other.OperationValue1;
      }
      if (other.OperationValue2 != 0) {
        OperationValue2 = other.OperationValue2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleID = input.ReadInt32();
            break;
          }
          case 16: {
            Move = input.ReadInt32();
            break;
          }
          case 24: {
            OperationID = input.ReadInt32();
            break;
          }
          case 32: {
            RightOperation = (global::PBBattle.RightOpType) input.ReadEnum();
            break;
          }
          case 40: {
            OperationValue1 = input.ReadInt32();
            break;
          }
          case 48: {
            OperationValue2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UdpUpPlayerOperations : pb::IMessage<UdpUpPlayerOperations> {
    private static readonly pb::MessageParser<UdpUpPlayerOperations> _parser = new pb::MessageParser<UdpUpPlayerOperations>(() => new UdpUpPlayerOperations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UdpUpPlayerOperations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpUpPlayerOperations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpUpPlayerOperations(UdpUpPlayerOperations other) : this() {
      mesID_ = other.mesID_;
      operation_ = other.operation_ != null ? other.operation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpUpPlayerOperations Clone() {
      return new UdpUpPlayerOperations(this);
    }

    /// <summary>Field number for the "mesID" field.</summary>
    public const int MesIDFieldNumber = 1;
    private int mesID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MesID {
      get { return mesID_; }
      set {
        mesID_ = value;
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private global::PBBattle.PlayerOperation operation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBBattle.PlayerOperation Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UdpUpPlayerOperations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UdpUpPlayerOperations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MesID != other.MesID) return false;
      if (!object.Equals(Operation, other.Operation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MesID != 0) hash ^= MesID.GetHashCode();
      if (operation_ != null) hash ^= Operation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MesID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MesID);
      }
      if (operation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Operation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MesID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MesID);
      }
      if (operation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UdpUpPlayerOperations other) {
      if (other == null) {
        return;
      }
      if (other.MesID != 0) {
        MesID = other.MesID;
      }
      if (other.operation_ != null) {
        if (operation_ == null) {
          Operation = new global::PBBattle.PlayerOperation();
        }
        Operation.MergeFrom(other.Operation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MesID = input.ReadInt32();
            break;
          }
          case 18: {
            if (operation_ == null) {
              Operation = new global::PBBattle.PlayerOperation();
            }
            input.ReadMessage(Operation);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllPlayerOperation : pb::IMessage<AllPlayerOperation> {
    private static readonly pb::MessageParser<AllPlayerOperation> _parser = new pb::MessageParser<AllPlayerOperation>(() => new AllPlayerOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllPlayerOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllPlayerOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllPlayerOperation(AllPlayerOperation other) : this() {
      operations_ = other.operations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllPlayerOperation Clone() {
      return new AllPlayerOperation(this);
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PBBattle.PlayerOperation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(10, global::PBBattle.PlayerOperation.Parser);
    private readonly pbc::RepeatedField<global::PBBattle.PlayerOperation> operations_ = new pbc::RepeatedField<global::PBBattle.PlayerOperation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBBattle.PlayerOperation> Operations {
      get { return operations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllPlayerOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllPlayerOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!operations_.Equals(other.operations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= operations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      operations_.WriteTo(output, _repeated_operations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllPlayerOperation other) {
      if (other == null) {
        return;
      }
      operations_.Add(other.operations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UdpDownFrameOperations : pb::IMessage<UdpDownFrameOperations> {
    private static readonly pb::MessageParser<UdpDownFrameOperations> _parser = new pb::MessageParser<UdpDownFrameOperations>(() => new UdpDownFrameOperations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UdpDownFrameOperations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpDownFrameOperations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpDownFrameOperations(UdpDownFrameOperations other) : this() {
      frameID_ = other.frameID_;
      operations_ = other.operations_ != null ? other.operations_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpDownFrameOperations Clone() {
      return new UdpDownFrameOperations(this);
    }

    /// <summary>Field number for the "frameID" field.</summary>
    public const int FrameIDFieldNumber = 1;
    private int frameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameID {
      get { return frameID_; }
      set {
        frameID_ = value;
      }
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 2;
    private global::PBBattle.AllPlayerOperation operations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBBattle.AllPlayerOperation Operations {
      get { return operations_; }
      set {
        operations_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UdpDownFrameOperations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UdpDownFrameOperations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameID != other.FrameID) return false;
      if (!object.Equals(Operations, other.Operations)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameID != 0) hash ^= FrameID.GetHashCode();
      if (operations_ != null) hash ^= Operations.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameID);
      }
      if (operations_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Operations);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameID);
      }
      if (operations_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operations);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UdpDownFrameOperations other) {
      if (other == null) {
        return;
      }
      if (other.FrameID != 0) {
        FrameID = other.FrameID;
      }
      if (other.operations_ != null) {
        if (operations_ == null) {
          Operations = new global::PBBattle.AllPlayerOperation();
        }
        Operations.MergeFrom(other.Operations);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameID = input.ReadInt32();
            break;
          }
          case 18: {
            if (operations_ == null) {
              Operations = new global::PBBattle.AllPlayerOperation();
            }
            input.ReadMessage(Operations);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UdpUpDeltaFrames : pb::IMessage<UdpUpDeltaFrames> {
    private static readonly pb::MessageParser<UdpUpDeltaFrames> _parser = new pb::MessageParser<UdpUpDeltaFrames>(() => new UdpUpDeltaFrames());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UdpUpDeltaFrames> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpUpDeltaFrames() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpUpDeltaFrames(UdpUpDeltaFrames other) : this() {
      battleID_ = other.battleID_;
      frames_ = other.frames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpUpDeltaFrames Clone() {
      return new UdpUpDeltaFrames(this);
    }

    /// <summary>Field number for the "battleID" field.</summary>
    public const int BattleIDFieldNumber = 1;
    private int battleID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleID {
      get { return battleID_; }
      set {
        battleID_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_frames_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> frames_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Frames {
      get { return frames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UdpUpDeltaFrames);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UdpUpDeltaFrames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleID != other.BattleID) return false;
      if(!frames_.Equals(other.frames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleID != 0) hash ^= BattleID.GetHashCode();
      hash ^= frames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleID);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleID);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UdpUpDeltaFrames other) {
      if (other == null) {
        return;
      }
      if (other.BattleID != 0) {
        BattleID = other.BattleID;
      }
      frames_.Add(other.frames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UdpDownDeltaFrames : pb::IMessage<UdpDownDeltaFrames> {
    private static readonly pb::MessageParser<UdpDownDeltaFrames> _parser = new pb::MessageParser<UdpDownDeltaFrames>(() => new UdpDownDeltaFrames());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UdpDownDeltaFrames> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpDownDeltaFrames() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpDownDeltaFrames(UdpDownDeltaFrames other) : this() {
      framesData_ = other.framesData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpDownDeltaFrames Clone() {
      return new UdpDownDeltaFrames(this);
    }

    /// <summary>Field number for the "framesData" field.</summary>
    public const int FramesDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PBBattle.UdpDownFrameOperations> _repeated_framesData_codec
        = pb::FieldCodec.ForMessage(10, global::PBBattle.UdpDownFrameOperations.Parser);
    private readonly pbc::RepeatedField<global::PBBattle.UdpDownFrameOperations> framesData_ = new pbc::RepeatedField<global::PBBattle.UdpDownFrameOperations>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBBattle.UdpDownFrameOperations> FramesData {
      get { return framesData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UdpDownDeltaFrames);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UdpDownDeltaFrames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!framesData_.Equals(other.framesData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= framesData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      framesData_.WriteTo(output, _repeated_framesData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += framesData_.CalculateSize(_repeated_framesData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UdpDownDeltaFrames other) {
      if (other == null) {
        return;
      }
      framesData_.Add(other.framesData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            framesData_.AddEntriesFrom(input, _repeated_framesData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UdpUpGameOver : pb::IMessage<UdpUpGameOver> {
    private static readonly pb::MessageParser<UdpUpGameOver> _parser = new pb::MessageParser<UdpUpGameOver>(() => new UdpUpGameOver());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UdpUpGameOver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpUpGameOver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpUpGameOver(UdpUpGameOver other) : this() {
      battleID_ = other.battleID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpUpGameOver Clone() {
      return new UdpUpGameOver(this);
    }

    /// <summary>Field number for the "battleID" field.</summary>
    public const int BattleIDFieldNumber = 1;
    private int battleID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleID {
      get { return battleID_; }
      set {
        battleID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UdpUpGameOver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UdpUpGameOver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleID != other.BattleID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleID != 0) hash ^= BattleID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UdpUpGameOver other) {
      if (other == null) {
        return;
      }
      if (other.BattleID != 0) {
        BattleID = other.BattleID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UdpDownGameOver : pb::IMessage<UdpDownGameOver> {
    private static readonly pb::MessageParser<UdpDownGameOver> _parser = new pb::MessageParser<UdpDownGameOver>(() => new UdpDownGameOver());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UdpDownGameOver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBBattle.PBBattleReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpDownGameOver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpDownGameOver(UdpDownGameOver other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdpDownGameOver Clone() {
      return new UdpDownGameOver(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UdpDownGameOver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UdpDownGameOver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UdpDownGameOver other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
